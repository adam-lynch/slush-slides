// Generated by CoffeeScript 1.7.1
(function() {
  var $, each, gulp, latestSlides, lazypipe, minifyAndStoreScripts, paths, pipes;

  gulp = require('gulp');

  $ = require("gulp-load-plugins")();

  each = require('through');

  lazypipe = require('lazypipe');

  latestSlides = [];

  paths = {
    source: function() {
      return './src/';
    },
    imagesDir: function() {
      return this.source() + 'images/';
    },
    images: function() {
      return [this.imagesDir() + '*.png', this.imagesDir() + '*.jpg'];
    },
    compressedImagesDir: function() {
      return this.imagesDir() + 'compressedImages/';
    },
    compressedImages: function() {
      return this.compressedImagesDir() + '*';
    },
    slides: function() {
      return this.source() + 'slides/*.md';
    },
    scriptsDir: function() {
      return this.source() + 'scripts/';
    },
    scripts: function() {
      return this.scriptsDir() + '*.coffee';
    },
    rootScript: function() {
      return this.scriptsDir() + 'index.coffee';
    },
    stylesDir: function() {
      return this.source() + 'styles/';
    },
    styles: function() {
      return this.stylesDir() + '*.less';
    },
    rootStylesheet: function() {
      return this.stylesDir() + 'index.less';
    },
    templates: function() {
      return this.source() + 'templates/*.jade';
    },
    output: function() {
      return './output/';
    },
    outputHtml: function() {
      return this.output() + '*.html';
    },
    outputImageDir: function() {
      return this.output() + 'images/';
    },
    outputScriptsDir: function() {
      return this.output() + 'scripts/';
    }
  };

  pipes = minifyAndStoreScripts = lazypipe().pipe(gulp.dest, paths.outputScriptsDir());

  gulp.task('default', ['compile']);

  gulp.task('compile', ['images', 'scripts', 'styles', 'templates']);

  gulp.task('watch', ['compile'], function() {
    gulp.watch(paths.compressedImages(), ['images']);
    gulp.watch(paths.scripts(), ['scripts']);
    gulp.watch(paths.styles(), ['styles']);
    return gulp.watch([paths.slides(), paths.templates()], ['templates']);
  });

  gulp.task('clean', function() {
    return gulp.src(paths.output()).pipe($.clean());
  });

  gulp.task('validate', function() {
    return gulp.src(paths.outputHtml()).pipe($.w3cjs());
  });

  gulp.task('compress-images', function() {
    return gulp.src(paths.images()).pipe($.imagemin()).pipe(gulp.dest(paths.compressedImagesDir()));
  });

  gulp.task('images', function() {
    return gulp.src(paths.compressedImages()).pipe(gulp.dest(paths.outputImageDir()));
  });

  gulp.task('parse-slides', function() {
    latestSlides = [];
    return gulp.src(paths.slides()).pipe($.frontMatter()).pipe($.markdown()).pipe(each(function(slide) {
      return latestSlides.push(slide);
    }));
  });

  gulp.task('scripts', ['scripts-first-party', 'scripts-third-party']);

  gulp.task('scripts-first-party', function() {
    return gulp.src(paths.rootScript(), {
      read: false
    }).pipe($.browserify({
      transform: ['coffeeify'],
      extensions: ['.coffee']
    })).pipe($.rename('index.js')).pipe(minifyAndStoreScripts());
  });

  gulp.task('scripts-third-party', function() {
    $.bowerFiles().pipe($.concat('third-party.js')).pipe(minifyAndStoreScripts());
    return gulp.src(paths.source() + 'third-party/third-party-static/*').pipe($.concat('third-party-static.js')).pipe(minifyAndStoreScripts());
  });

  gulp.task('templates', ['parse-slides'], function() {
    return gulp.src(paths.templates()).pipe($.jade({
      locals: {
        slides: latestSlides
      }
    })).pipe(gulp.dest(paths.output()));
  });

  gulp.task('styles', function() {
    return gulp.src(paths.rootStylesheet()).pipe($.less()).pipe($.autoprefixer('last 2 versions')).pipe(gulp.dest(paths.output()));
  });

}).call(this);
